---
title: "logbook"
format:
  html:
    toc: true
    toc-location: left
    smooth-scroll: true
theme:
  light: flatly
  dark: darkly
code-overflow: wrap
engine: knitr
execute: 
  cache: true
---
## Intro
This logbooks contains PC-analyses on multiple proteomics datasets, DESEQ2 analysis on transcriptomics datasets, and plots. All of these

## Meta stuff

Download and load the packages needed to run chunks.

```{r}
list.of.packages <- c("ggplot2", "tidyverse", "mdatools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)

```

```{r}
library(ggplot2)
library(tidyverse)

```

## 14-05-2025

### Loading data

The data loaded here is not imputed yet, i will be using this data to test PCA on. Yamila is working on normalizing and imputing the data.

```{r}

load("/students/2024-2025/Thema08/liver-transplant/proteomics/data/count_data.Rdata")
load("/students/2024-2025/Thema08/liver-transplant/proteomics/data/meta_data.Rdata")
```

First i will make all of the NA values 0, so i can perform PCA on this.

```{r}
na_mask <- is.na(data_filtered)
data_filtered[na_mask] <- 0
head(data_filtered)
```

The data contains alot of NA values, Yamila will fix this with imputation.

```{r}
head(meta_data_liver)

```

This is the metadata, containing information about the different samples.

I will delete the samples with a variance of 0, this samples won't contribute to the PCA, and removing them will speed the analysis up.

```{r}

X_t <- t(data_filtered)
variances <- apply(X_t, 2, var)
X_t <- X_t[, which(variances > 0)]
dim(X_t)
```

Transform and scale the data with log2 and scaling

```{r}
transformed <- log2(X_t + 1)
scaled <- scale(transformed, center = T, scale = T)
```

Using the `cov` function i will calculate a covariance matrix, this will contain the linear correlations between 2 samples for every sample in the df.

```{r}
covmat <- cov(t(scaled))
```

From there i will calulate the eigenvectors with `eigen`, and the loadings.

```{r}
eig <- eigen(covmat)

loadings <- t(scaled) %*% eig$vectors
loadings <- t(t(loadings) / sqrt(colSums(loadings^2)))
```

With these loadings i can project these loadings on our data, and get the scores. I can label the different components here and these scores can then be plotted.

```{r}
scores <- scaled %*% loadings
scores_df <- as.data.frame(scores)
col_n <- seq(ncol(scores))
col_names <- paste0("PC", col_n)
names(scores_df) <- col_names
head(scores_df)
```

```{r}
#| fig-cap: "Scatterplot showing the scores of PC1 and PC2. The color represents the quality of the liver, while the shape depends on if the liver was transplanted or not."
ggplot(
  scores_df,
  aes(x = PC1,
      y = PC2,
      color = meta_data_liver$`Biliary viability score group`,
      shape = meta_data_liver$Transplant),) +
  geom_point() +
  scale_fill_brewer(palette="Dark2") +
  labs(color = "Billiary viability score")

```

Interesting:

-   We see that most of the samples with a high billiary viability score appear more on the right of PC1, where ass the lower scores appear more left.
-   There appears no real clustering on the PC2 between the 2 groups.

::: {.callout-note title="Key Insight"}
This could be explained by the amount of samples or genes with NA values.
:::

Explained variances

```{r}
explained_var <- as.data.frame(eig$values / sum(eig$values)) * 100
explained_var$PC <- paste0("PC", col_n)
names(explained_var) <- c("ex_var","PC")
head(explained_var)
```

```{r}
ggplot(explained_var[1:20,],
       aes(x = PC,
           y = ex_var)) +
  geom_col()

```

## 18-05-2025

### PCA met mdatools

Om te vergelijken of MDA tools een ander resultaat geeft wil ik de PCA uitvoeren met deze tool en vergelijken met mijn eigen uitgevoerde PCA.

```{r}
library(mdatools)

```

```{r}
model <- pca(transformed, center = T, scale = T, info ="Test PCA model")
model$ncomp
```

```{r}

plotScores(model, )
```

```{r}
ggplot(
  model$res$cal$scores,
  aes(x = `Comp 1`,
      y = `Comp 2`,
      color = meta_data_liver$`Biliary viability score group`,
      shape = meta_data_liver$Transplant),) +
  geom_point() +
  labs(color = "Billiary viability score")
```

Naast dat de plot geflipped is ziet deze er hetzelfde uit als mijn eigen gegenereerde PCA plot, dit houd in dat ik deze tool kan gaan gebruiken om de data te verwerken

### Echte data PCA

Voorheen was er data gebruikt waar nog geen imputatie op gebruikt was. Yamila heeft een nieuwe dataset gedeeld waarbij alle NA-waarden geimputeerd zijn. Hier zal ik opnieuw een PCA op uitvoeren.

#### Laden data 30 minuten

```{r}
load("/students/2024-2025/Thema08/liver-transplant/proteomics/data/data_double_normalized_imputed_30min.Rdata")
```

Omdat deze data niet meer past bij de metadata ga ik zelf high en low values uit de naam halen.

```{r}
library(stringr)
```

```{r}

df_data <- as.data.frame(data_imp_30min)

bil_via <- str_extract(names(df_data), "[^_]+")
sample_names <- str_extract(names(df_data), "_(.*)") %>%
  str_replace("^_", "")
head(sample_names)
```

```{r}
meta_data_liver_filtered <- meta_data_liver %>%
  dplyr::filter((Sample %in% sample_names) & (Timepoint == '30min'))

head(meta_data_liver_filtered)

```

Nu komt de metadata overeen met de nieuwe gefilterde data. Deze kan nu gebruikt worden om kleuren te geven in plots, en zo kan er beter groepen weergegeven worden.

```{r}
df_data <- df_data %>%
  tibble::rownames_to_column("protein")


```

#### PCA 30 minuten

```{r}
model <- pca(t(data_imp_30min), center = T, scale = T)
```

```{r}
ggplot(
  model$res$cal$scores,
  aes(x = `Comp 1`,
      y = `Comp 2`,
      colour = meta_data_liver_filtered$`Biliary viability score group`),) +
  geom_point(size = 2) +
  scale_x_continuous(breaks = seq(-20, 70, 20)) +
  scale_y_continuous(breaks = seq(-40, 30, 20)) +
  coord_fixed() +
  theme_minimal()   +
  labs(color = "Billiary viability score",
       shape = "Transplanted",
       x = paste("Comp 1: ", signif(model$res$cal$expvar[1], digits = 3), "%", sep = ""),
       y = paste("Comp 2: ", signif(model$res$cal$expvar[2], digits = 3), "%", sep = ""))
```

In deze plot zijn een aantal dingen zichtbaar:

-   Een hogere viability houd vaak in dat de lever getransplanteerd is.
-   De PCA geeft niet een duidelijke seperatie weer tussen de 2 groepen.
-   Hoge viability is iets meer verspreid dan laag
-   1 lage viability ligt ver weg van alle andere punten.
-   De meeste punten liggen bij elkaar rond de origin
-   PLS-DA kan aangeraden worden om hier beter naar te kijken.

Imputatie kan verklaren waarom de meeste punten gewoon bij elkaar liggen. Ik wil graag noteren welke sample die blauwe is aan de rechterkant. Later tijdens de DEP analyse kunnen we die mogelijk ook bekijken.

```{r}
scores_df <- as.data.frame(model$res$cal$scores)

low_bil_value <- meta_data_liver_filtered %>%
  dplyr::filter(`Biliary viability score group` == "Low")

standout_low_sample <- scores_df %>%
  tibble::rownames_to_column("Sample") %>%
  mutate(Sample = sub("^[^_]+_", "", Sample)) %>%
  dplyr::filter(Sample %in% low_bil_value$Sample) %>%
  dplyr::filter(`Comp 1` == max(`Comp 1`))

standout_low_sample
```

Hieruit zien we dat NMP_Bile_Proteomics_212 de grote outlier is, deze kunnen we bij volgende stappen in de gaten houden.

Nu wil ik zien hoeveel van de variantie verklaard wordt door de 1e 20 prinipale componenten.

```{r}
plotVariance(model)
```

Dit geeft weer dat component 1 ongeveer 21% van de variantie verklaard PC-2 rond de 9, en vanaf PC-5 is het \< 5%.

Ik wil nu de top 20 proteins weergeven van PC-1

```{r}
loadings <- model$loadings
loadings$pc1 <- loadings[,2]

plot(loadings$pc1)
```

```{r}
argsort <- order(loadings$pc1^2, decreasing = T)
plot(loadings$pc1[argsort])
```

```{r}
top_x_genes <- df_data[argsort, 1]
head(top_x_genes)

```

Dit zijn de top 100 genen

```{r}
#| eval: false
save(top_x_genes, file = "/students/2024-2025/Thema08/liver-transplant/proteomics/top_x_genes/top_x_genes_30_final_pc2.Rdata")
```

### Mapping transcriptomics data

Jarno loopt tegen een probleem dat maar 35% van onze data gemapped kan worden, ik zal bepalen hoe dit kan. Eerst ga ik de kwaliteit van de fastq data bepalen. Dit ga ik doen met Falco en multiqc

```{bash}
#| eval: false
ls /students/2024-2025/Thema08/liver-transplant/transcriptomics/fastq_data/ | \
parallel "/students/2024-2025/Thema05/BlaasKanker/Transcriptomics/tools/bin/falco /students/2024-2025/Thema08/liver-transplant/transcriptomics/fastq_data/{} -o /students/2024-2025/Thema08/liver-transplant/transcriptomics/falco/{}_fastqc_report"
```

```{bash}
#| eval: false
multiqc /students/2024-2025/Thema08/liver-transplant/transcriptomics/falco/* -o /students/2024-2025/Thema08/liver-transplant/transcriptomics/multiqc/
```

## 19-05-2025

### Mapping transcriptomics

```{bash}
#| eval: false
cat /students/2024-2025/Thema05/BlaasKanker/Transcriptomics/mouse_cell_SRR.txt | \
    parallel 'STAR --runThreadN 6 ' \
        '--genomeDir /students/2024-2025/Thema05/BlaasKanker/Transcriptomics/tools/star/index_GRCm39/ ' \
        '--readFilesIn /students/2024-2025/Thema08/liver-transplant/transcriptomics/fastq_data/ERR12161053_1.fastq.gz /students/2024-2025/Thema08/liver-transplant/transcriptomics/fastq_data/ERR12161053_2.fastq.gz ' \
        '--outSAMtype BAM SortedByCoordinate ' \
        '--quantMode GeneCounts ' \
        '--genomeLoad LoadAndRemove' \
        '--limitBAMsortRAM 2000000000 ' \
        '--outFileNamePrefix /students/2024-2025/Thema08/liver-transplant/transcriptomics/STAR/test_star_'

```

```{bash}
#| eval: false
STAR --runThreadN 6 --genomeDir /students/2024-2025/Thema05/BlaasKanker/Transcriptomics/tools/star/index_GRCm39/ --readFilesIn /students/2024-2025/Thema08/liver-transplant/transcriptomics/fastq_data/ERR12161053_1.fastq /students/2024-2025/Thema08/liver-transplant/transcriptomics/fastq_data/ERR12161053_2.fastq --outSAMtype BAM SortedByCoordinate --quantMode GeneCounts --genomeLoad LoadAndRemove --limitBAMsortRAM 2000000000 --outFileNamePrefix /students/2024-2025/Thema08/liver-transplant/transcriptomics/STAR/test_star_

```

### Pca 150 minute data

```{r}
load("/students/2024-2025/Thema08/liver-transplant/proteomics/data/data_double_normalized_imputed_150min.Rdata")
```

```{r}
df_data_150 <- as.data.frame(data_imp_150min)

bil_via_150 <- str_extract(names(df_data_150), "[^_]+")
sample_names_150 <- str_extract(names(df_data_150), "_(.*)") %>%
  str_replace("^_", "")
sample_names_150

head(df_data_150)
```

```{r}
meta_data_liver_filtered_150 <- meta_data_liver %>%
  dplyr::filter((Sample %in% sample_names_150) & (Timepoint == '150min'))

head(meta_data_liver_filtered_150)

```

Nu komt de metadata overeen met de nieuwe gefilterde data. Deze kan nu gebruikt worden om kleuren te geven in plots, en zo kan er beter groepen weergegeven worden.

```{r}
df_data_150 <- df_data_150 %>%
  tibble::rownames_to_column("protein")

```

```{r}
model_150 <- pca(t(df_data_150[,2:ncol(df_data_150)]), center = T, scale = T)

```

```{r}
ggplot(
  model_150$res$cal$scores,
  aes(x = `Comp 1`,
      y = `Comp 2`,
      color = meta_data_liver_filtered_150$`Biliary viability score group`,),) +
  geom_point(size = 2) +
  coord_fixed(ratio = 1) +
  scale_x_continuous(breaks = seq(-50, 30, 20)) +
  scale_y_continuous(breaks = seq(-40, 30, 20)) +
  theme_minimal() +
  labs(color = "Billiary viability score",
       shape = "Transplanted",
       x = paste("Comp 1: ", signif(model_150$res$cal$expvar[1], digits = 3), "%", sep = ""),
       y = paste("Comp 2: ", signif(model_150$res$cal$expvar[2], digits = 3), "%", sep = ""))
```

Conclusie

```{r}
#| eval: false
ggsave("../../plots/pca_150_min.png", last_plot(), bg='transparent')
```

```{r}
plotVariance(model_150)
```

Conclusie Top 100 genes

```{r}
loadings_150 <- model_150$loadings

pc1_150 <- loadings_150[,2]
argsort_150 <- order(pc1_150^2, decreasing = T)
```

```{r}
top_x_genes_150 <- df_data_150[argsort_150, 1]
head(top_x_genes_150)
```

```{r}
#| eval: false
save(top_x_genes_150, file = "/students/2024-2025/Thema08/liver-transplant/proteomics/top_x_genes/top_x_genes_150_final_pc2.Rdata")
```

## 20-05-2025

### Mapping hisat

```{bash}
#| eval: false
sbatch --partition=assemblix \
  --job-name=hisat2 \
  --ntasks=1 \
  --cpus-per-task=8 \
  --mem=300G \
  --time=12:00:00 \
  --wrap="ls /students/2024-2025/Thema08/liver-transplant/transcriptomics/fastq_data/*.filtered | parallel -j 8 'hisat2 -x /students/2024-2025/Thema08/liver-transplant/transcriptomics/ref_hg38/grch38_tran/genome_tran -U {} -S /students/2024-2025/Thema08/liver-transplant/transcriptomics/hisat2/{/.}.sam --phred33 --mm'"
```

```{bash}
#| eval: false
hisat2 -x /students/2024-2025/Thema08/liver-transplant/transcriptomics/ref_hg38/genome_tran  -U /students/2024-2025/Thema08/liver-transplant/transcriptomics/fastq_data/ERR12161065_1.fastq.filtered -S file_name_unpaired.sam --phred33   

```

## 21-05-2025

### Featurecounts

count data halen uit de sam files.

```{bash}
#| eval: false
featureCounts -T 5 -t exon -g gene_id -a /students/2024-2025/Thema08/liver-transplant/transcriptomics/ref_hg38/grch38_tran/Homo_sapiens.GRCh38.84.gtf -o counts.txt /students/2024-2025/Thema08/liver-transplant/transcriptomics/hisat2/*.sam
```

```{r}
transcriptomics_data <- read.table("/students/2024-2025/Thema08/liver-transplant/transcriptomics/featurecounts/counts.txt", skip = 1, header = T)
head(transcriptomics_data)
```

```{r}
head(meta_data_liver)
```

```{r}
transcriptomics_metadata <- read.table("/students/2024-2025/Thema08/liver-transplant/data/E-MTAB-13501.sdrf.txt", header = T, sep = "\t")
head(transcriptomics_metadata)
```

Adding gene symbol to dataframe

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
genes <- transcriptomics_data$Geneid
ann <- select(org.Hs.eg.db, keys = genes, keytype = 'ENSEMBL', columns = 'SYMBOL')
transcriptomics_data <- merge(transcriptomics_data, ann, by.x = "Geneid", by.y = "ENSEMBL", all.x = TRUE)
transcriptomics_data <- transcriptomics_data %>%
  dplyr::select(c(Geneid, SYMBOL), everything())

head(transcriptomics_data)
```

## 22-05-2025

### PCA and transcriptomics processing

Nu moeten de juiste sample namen gebruikt worden in de dataframe, zodat deze gelinkt kunnen worden aan de meta data.

```{r}
names_transcript <- names(transcriptomics_data)
sample_name <- sub(".*(ERR[0-9]+).*", "\\1", names_transcript)
sample_name

names(transcriptomics_data) <- sample_name
head(transcriptomics_data)

```

Removing dupes

```{r}
#| warning: false

# Remove duplicate geneID's
transcriptomics_data <- transcriptomics_data %>%
  distinct(Geneid, .keep_all = TRUE)

# Addup symbols that are duplicated
transcriptomics_data <- transcriptomics_data %>%
  group_by(SYMBOL) %>%
  mutate(across(starts_with("ERR"), sum, na.rm = TRUE)) %>%
  distinct(SYMBOL, .keep_all = TRUE)

sum(is.na(transcriptomics_data$SYMBOL)) # == 1
transcriptomics_data <- transcriptomics_data %>%
  filter(!is.na(SYMBOL))
```

```{r}
count_data_transcript <- transcriptomics_data[,8:ncol(transcriptomics_data)]

head(count_data_transcript)
```

Deze bevat alleen de samples met de juiste sample namen. Deze data kan nu geschaald en genormaliseerd worden.

De metadata bevat elke sample 2x, deze haal ik er uit.

```{r}

transcriptomics_metadata_dups_rem <- transcriptomics_metadata[!duplicated(transcriptomics_metadata[c('Comment.ENA_SAMPLE.')]),]
```

```{r}
count_transcript_t <- t(count_data_transcript)
variances_transcript <- apply(count_transcript_t, 2, var)
count_transcript_t <- count_transcript_t[, which(variances_transcript > 0)]
dim(count_transcript_t)
transformed_trans <- log2(count_transcript_t + 1)

scaled_trans <- scale(transformed_trans, center = T, scale = T)

```

Hier kan ik nu een PCA op uitvoeren

```{r}
model_transcriptomics <- pca(scaled_trans, center = T, scale = T, info = "Transcriptomics",ncomp = ncol(count_data_transcript))
```

```{r}
#| fig-cap: "PC analyse on transcriptomics data. Color shows biliary viability, Shape shows transplant status"
ggplot(
  model_transcriptomics$res$cal$scores,
  aes(x = `Comp 1`,
      y = `Comp 2`,
      color = transcriptomics_metadata_dups_rem$Factor.Value.biliary.viability.score.group.,
      shape = transcriptomics_metadata_dups_rem$Characteristics.transplant.suitability.),) +
  geom_point() +
  labs(color = "Billiary viability score",
       shape = "Transplanted")


```

TODO conclusie

```{r}
plotVariance(model_transcriptomics)
```

TODO conclusie

```{r}
loadings_transcriptomics <- model_transcriptomics$loadings
plot(loadings_transcriptomics[,1])
```

```{r}
argsort_transscript <- order(loadings_transcriptomics[,1]^2, decreasing = T)
plot(loadings_transcriptomics[,1][argsort_transscript])
```

```{r}
genes_pca1_transcript <- transcriptomics_data[argsort_transscript,2]
head(genes_pca1_transcript)
```

### DESEQ2

```{r}
#| warning: false
library(DESeq2)

```

## 25-05-2025

### DESEQ2

Creating coldata

```{r}
coldata <- transcriptomics_metadata_dups_rem %>%
  dplyr::filter(Comment.ENA_RUN. %in% names(count_data_transcript)) %>%
  dplyr::select(Comment.ENA_RUN., Characteristics.biliary.viability.score.group.) %>%
  tibble::column_to_rownames("Comment.ENA_RUN.")
coldata
```

```{r}
row.names(transcriptomics_data) <- NULL
count_data_dds <- transcriptomics_data[,c(2,8:ncol(transcriptomics_data))] %>%
  tibble::column_to_rownames("SYMBOL")

```

```{r}
dds <- DESeqDataSetFromMatrix(countData = count_data_dds,
                              colData = coldata,
                              design = ~ Characteristics.biliary.viability.score.group.)
dds <- DESeq(dds)
```

```{r}
resultsNames(dds)
res <- results(dds, name = "Characteristics.biliary.viability.score.group._low_vs_high")
res
```

Nu hebben we de resultaten voor alle genen en de verschillen tussen de hoge en lage viability. Hier kan met een lfcShrink de log fold change geschaald worden

```{r}
#| warning: false
resLFC <- lfcShrink(dds, coef = "Characteristics.biliary.viability.score.group._low_vs_high")
resLFC
```

```{r}
summary(res)
```

```{r}
plotCounts(dds, gene=which.min(res$padj), intgroup="Characteristics.biliary.viability.score.group.")
```

```{r}
plotMA(res)
```
